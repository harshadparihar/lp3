// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CustomerData {
    struct Customer {
        uint id;
        string name;
        string email;
    }

    Customer[] public customers;

    // Add a new customer
    function addCustomer(uint _id, string memory _name, string memory _email) public {
        customers.push(Customer(_id, _name, _email));
    }

    // Get customer by index
    function getCustomer(uint index) public view returns (Customer memory) {
        return customers[index];
    }

    // Receive Ether function to handle Ether transfers
    receive() external payable {
        // Optional logic for handling Ether (if needed)
    }

    // Fallback function to handle unknown function calls or fallback
    fallback() external payable {
        // Optional fallback logic
    }
}



EmployeeData

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EmployeeData {
    struct Employee {
        uint id;
        string name;
        string position;
    }

    Employee[] public employees;

    // Add a new employee
    function addEmployee(uint _id, string memory _name, string memory _position) public {
        employees.push(Employee(_id, _name, _position));
    }

    // Get employee by index
    function getEmployee(uint index) public view returns (Employee memory) {
        return employees[index];
    }

    // Receive Ether function to handle Ether transfers
    receive() external payable {
        // Code to handle Ether transfers (optional)
    }

    // Fallback function to handle unknown calls or Ether transfers
    fallback() external payable {
        // Fallback logic (if needed)
    }
}


StudentData

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    struct Student {
        uint id;
        string name;
        uint age;
    }

    Student[] public students;

    // Add a new student
    function addStudent(uint _id, string memory _name, uint _age) public {
        students.push(Student(_id, _name, _age));
    }

    // Get student by index
    function getStudent(uint index) public view returns (Student memory) {
        return students[index];
    }

    // Receive Ether function to handle Ether transfers
    receive() external payable {
        // Code to handle incoming Ether (if needed)
    }

    // Fallback function to handle non-existent function calls
    fallback() external payable {
        // Code for fallback (if needed)
    }
}


Bank account 

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount {
    address public owner;
    uint public balance;

    constructor() {
        owner = msg.sender;
    }

    function deposit(uint _amount) public {
        require(_amount > 0, "Deposit amount must be greater than zero");
        balance += _amount;
    }

    function withdraw(uint _amount) public {
        require(_amount > 0, "Withdraw amount must be greater than zero");
        require(balance >= _amount, "Insufficient balance");
        balance -= _amount;
    }

    function getBalance() public view returns (uint) {
        return balance;
    }
}


Product Registri


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract ProductRegistry{
    struct Product{
     string name;
     uint256 stock;
     uint256 id;
    }
    mapping(uint256 => Product) private products;
    mapping(uint256 => bool) private exists;
    function RecieveStock(string memory name,uint256 amount,uint256 id) public {
        require(!exists[id],'Already assigned');
        require(amount>0,'The restock amount must be greater than ZERO.');
        products[id] = Product(name,amount,id);
        exists[id]=true;
    }
    function SaleStock(uint256 id,uint256 amount) public {
        require(exists[id],'Already assigned');
        require(amount>0,'The restock amount must be greater than ZERO.');
        require(products[id].stock>amount,'Insufficient stock.');
        products[id].stock-=amount;
    }
    function DispalyStock(uint256 id) public view returns (string memory,uint256) {
        require(exists[id],'Does not exist.');
        return (products[id].name,products[id].stock);
    }
}